name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r case-requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Create test directories
      run: |
        mkdir -p data
        mkdir -p exports/pdfs

    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        pip install mypy types-requests
        mypy modules/ --ignore-missing-imports || true

    - name: Run tests with pytest
      run: |
        pytest --cov=modules --cov=case-opening-app --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report-${{ matrix.python-version }}
        path: htmlcov/

    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          coverage.xml
          htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit

    - name: Run safety check for known vulnerabilities
      run: |
        safety check --json || true

    - name: Run bandit security linter
      run: |
        bandit -r modules/ case-opening-app.py -f json -o bandit-report.json || true

    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: |
          bandit-report.json

  build-check:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r case-requirements.txt

    - name: Create test environment
      run: |
        mkdir -p data
        mkdir -p exports/pdfs
        echo "JWT_SECRET=test-secret-for-ci" > .env
        echo "SMTP_USERNAME=test@example.com" >> .env
        echo "SMTP_PASSWORD=test-password" >> .env

    - name: Test Streamlit app syntax
      run: |
        python -m py_compile case-opening-app.py
        python -c "import modules.database; import modules.forms; import modules.pdf_generator; import modules.utils; import modules.auth; print('All modules import successfully')"

    - name: Test basic functionality
      run: |
        python -c "
        from modules.database import CaseDatabase
        from modules.utils import format_phone, parse_date
        
        # Test database
        db = CaseDatabase('test.json')
        print('Database test: OK')
        
        # Test utilities
        assert format_phone('5551234567') == '(555) 123-4567'
        print('Utils test: OK')
        
        print('Basic functionality test: PASSED')
        "

  performance-check:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r case-requirements.txt
        pip install memory-profiler

    - name: Run performance tests
      run: |
        python -c "
        import time
        from modules.database import CaseDatabase
        
        # Test database performance with larger dataset
        db = CaseDatabase('perf_test.json')
        
        start_time = time.time()
        for i in range(100):
            case_data = {
                'id': f'perf-case-{i}',
                'first_name': f'Test{i}',
                'last_name': f'User{i}',
                'case_number': f'23CF{i:06d}'
            }
            db.add_case(case_data)
        
        elapsed = time.time() - start_time
        print(f'Added 100 cases in {elapsed:.2f} seconds')
        
        # Test search performance
        start_time = time.time()
        results = db.search_cases('Test')
        elapsed = time.time() - start_time
        print(f'Search completed in {elapsed:.4f} seconds, found {len(results)} results')
        "