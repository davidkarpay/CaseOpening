name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - major
        - minor
        - patch
        - hotfix

jobs:
  validate-release:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate version format
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a prerelease (contains alpha, beta, rc)
        if [[ "$VERSION" =~ (alpha|beta|rc) ]]; then
          echo "is_prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is_prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        # Validate semantic versioning format
        if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\-\.]+)?$ ]]; then
          echo "❌ Invalid version format: $VERSION"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        
        echo "✅ Version format is valid: $VERSION"

    - name: Check if tag already exists
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        if git tag | grep -q "^$VERSION$"; then
          echo "❌ Tag $VERSION already exists!"
          exit 1
        fi
        echo "✅ Tag $VERSION is available"

  run-tests:
    runs-on: ubuntu-latest
    needs: validate-release

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r case-requirements.txt
        pip install -r tests/requirements-test.txt

    - name: Create test directories
      run: |
        mkdir -p data
        mkdir -p exports/pdfs

    - name: Run comprehensive tests
      run: |
        pytest --cov=modules --cov=case-opening-app --cov-report=xml --cov-fail-under=70 -v

    - name: Run security checks
      run: |
        pip install safety bandit
        safety check || true
        bandit -r modules/ case-opening-app.py || true

  build-artifacts:
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel setuptools

    - name: Create setup.py for packaging
      run: |
        cat > setup.py << EOF
        from setuptools import setup, find_packages
        
        with open("README.md", "r", encoding="utf-8") as fh:
            long_description = fh.read()
        
        with open("case-requirements.txt", "r", encoding="utf-8") as fh:
            requirements = [line.strip() for line in fh if line.strip() and not line.startswith("#")]
        
        setup(
            name="case-opening-manager",
            version="${{ needs.validate-release.outputs.version }}".lstrip('v'),
            author="David Karpay",
            author_email="dkarpay@pd15.org",
            description="A Streamlit web application for managing case opening sheets",
            long_description=long_description,
            long_description_content_type="text/markdown",
            url="https://github.com/davidkarpay/CaseOpening",
            packages=find_packages(),
            classifiers=[
                "Development Status :: 4 - Beta",
                "Intended Audience :: Legal",
                "License :: OSI Approved :: MIT License",
                "Operating System :: OS Independent",
                "Programming Language :: Python :: 3",
                "Programming Language :: Python :: 3.9",
                "Programming Language :: Python :: 3.10",
                "Programming Language :: Python :: 3.11",
            ],
            python_requires=">=3.9",
            install_requires=requirements,
            entry_points={
                "console_scripts": [
                    "case-opening-manager=case-opening-app:main",
                ],
            },
        )
        EOF

    - name: Build distribution packages
      run: |
        python setup.py sdist bdist_wheel

    - name: Create deployment package
      run: |
        mkdir -p release-artifacts
        
        # Create source archive
        tar -czf release-artifacts/case-opening-manager-${{ needs.validate-release.outputs.version }}-source.tar.gz \
          --exclude='.git*' \
          --exclude='__pycache__' \
          --exclude='*.pyc' \
          --exclude='data/' \
          --exclude='exports/' \
          --exclude='htmlcov/' \
          --exclude='dist/' \
          --exclude='build/' \
          .
        
        # Copy wheel and source distribution
        cp dist/* release-artifacts/ || true

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ needs.validate-release.outputs.version }}
        path: release-artifacts/

  create-release:
    runs-on: ubuntu-latest
    needs: [validate-release, run-tests, build-artifacts]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts-${{ needs.validate-release.outputs.version }}
        path: release-artifacts/

    - name: Generate changelog
      id: changelog
      run: |
        VERSION="${{ needs.validate-release.outputs.version }}"
        
        # Get the previous tag
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -v "$VERSION" | head -n 1)
        
        echo "Generating changelog from $PREVIOUS_TAG to $VERSION"
        
        # Generate changelog
        cat > CHANGELOG.md << EOF
        # Changelog for $VERSION
        
        **Release Date**: $(date -u +"%Y-%m-%d")
        
        ## Changes Since $PREVIOUS_TAG
        
        EOF
        
        # Add commit messages since last tag
        if [ ! -z "$PREVIOUS_TAG" ]; then
          git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> CHANGELOG.md
        else
          git log --pretty=format:"- %s (%h)" >> CHANGELOG.md
        fi
        
        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Streamlit Cloud" >> CHANGELOG.md
        echo "Deploy directly from this release on [Streamlit Cloud](https://streamlit.io/cloud)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Local Installation" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "git clone https://github.com/davidkarpay/CaseOpening.git" >> CHANGELOG.md
        echo "cd CaseOpening" >> CHANGELOG.md
        echo "git checkout $VERSION" >> CHANGELOG.md
        echo "pip install -r case-requirements.txt" >> CHANGELOG.md
        echo "streamlit run case-opening-app.py" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Verification" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "To verify this release:" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "git verify-tag $VERSION" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.validate-release.outputs.version }}
        release_name: Release ${{ needs.validate-release.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ needs.validate-release.outputs.is_prerelease }}

    - name: Upload source archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/case-opening-manager-${{ needs.validate-release.outputs.version }}-source.tar.gz
        asset_name: case-opening-manager-${{ needs.validate-release.outputs.version }}-source.tar.gz
        asset_content_type: application/gzip

    - name: Upload wheel distribution
      uses: actions/upload-release-asset@v1
      if: always()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: release-artifacts/case_opening_manager-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_name: case_opening_manager-${{ needs.validate-release.outputs.version }}-py3-none-any.whl
        asset_content_type: application/zip
      continue-on-error: true

  deploy-to-production:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: needs.validate-release.outputs.is_prerelease == 'false'
    environment: production

    steps:
    - uses: actions/checkout@v4

    - name: Deploy to Streamlit Cloud
      run: |
        echo "🚀 Deploying ${{ needs.validate-release.outputs.version }} to production"
        echo "Streamlit Cloud will automatically deploy from the new tag"

    - name: Update deployment status
      uses: actions/github-script@v6
      with:
        script: |
          github.rest.repos.createDeploymentStatus({
            owner: context.repo.owner,
            repo: context.repo.repo,
            deployment_id: 'release-${{ needs.validate-release.outputs.version }}',
            state: 'success',
            environment: 'production',
            description: 'Release ${{ needs.validate-release.outputs.version }} deployed successfully'
          });

  notify-release:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always()

    steps:
    - name: Notify release completion
      uses: actions/github-script@v6
      with:
        script: |
          const version = '${{ needs.validate-release.outputs.version }}';
          const isPrerelease = '${{ needs.validate-release.outputs.is_prerelease }}' === 'true';
          const releaseType = isPrerelease ? 'Pre-release' : 'Release';
          
          const releaseBody = `
          ## 🎉 ${releaseType} ${version} Published!
          
          **What's New:**
          - View the full changelog in the [release notes](https://github.com/${{ github.repository }}/releases/tag/${version})
          - Download the source code and distribution packages
          - Deploy directly to Streamlit Cloud from this release
          
          **Quick Start:**
          \`\`\`bash
          git clone https://github.com/${{ github.repository }}.git
          cd CaseOpening
          git checkout ${version}
          pip install -r case-requirements.txt
          streamlit run case-opening-app.py
          \`\`\`
          
          **Streamlit Cloud:** Auto-deployment triggered for production environment
          
          ---
          *This release was automatically created and tested by our CI/CD pipeline.*
          `;
          
          console.log('Release notification prepared');

  cleanup:
    runs-on: ubuntu-latest
    needs: [validate-release, create-release, deploy-to-production]
    if: always()

    steps:
    - name: Cleanup artifacts
      run: |
        echo "🧹 Cleaning up temporary release artifacts"
        echo "Release ${{ needs.validate-release.outputs.version }} processing complete"